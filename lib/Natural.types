module Natural where

import Basic
import Equality

let zero-suc-neq-helper : Nat → Type =
  λ m → natElim (λ _ → Type) (λ _ → False) Unit

let zero-suc-neq : (m : Nat) → Not (Eq Nat 0 (suc m)) =
  λ m eq → Equality.subst Nat zero-suc-neq-helper 0 (suc m) tt

let add : Nat → Nat → Nat =
  λ m n → natElim (Basic.const Type Nat Nat) (λ _ → suc) n m

let add-id-l : Equality.LeftIdentity Nat add 0 = refl Nat

let add-id-r : Equality.RightIdentity Nat add 0 =
  natElim
    (λ n → Eq Nat (add n 0) n)
    (λ n → Equality.cong Nat Nat suc (add n 0) n)
    (refl Nat 0)

let add-suc : (m n : Nat) → Eq Nat (add m (suc n)) (suc (add m n)) =
  natElim (λ m → (n : Nat) → Eq Nat (add m (suc n)) (suc (add m n)))
    (λ m ih n → Equality.cong Nat Nat suc (add m (suc n)) (suc (add m n)) (ih n))
    (λ n → refl Nat (suc n))

let add-comm : Equality.Commutativity Nat add =
  natElim (λ m → (n : Nat) → Eq Nat (add m n) (add n m))
    (λ m ih n →
      trans Nat (suc (add m n)) (suc (add n m)) (add n (suc m))
        (Equality.cong Nat Nat suc (add m n) (add n m) (ih n))
        (sym Nat (add n (suc m)) (suc (add n m)) (add-suc n m)))
    (λ n → sym Nat (add n 0) n (add-id-r n))

let add-assoc : Equality.Associativity Nat add =
  natElim (λ l → (m n : Nat) → Eq Nat (add (add l m) n) (add l (add m n)))
    (λ l ih m n →
      Equality.cong Nat Nat suc (add (add l m) n) (add l (add m n)) (ih m n))
    (λ m n → refl Nat (add m n))

let mul : Nat → Nat → Nat =
  λ m n → natElim (λ _ → Nat) 0 (λ _ → add n) m

let mul-zero-l : (n : Nat) → Eq Nat (mul 0 n) 0 =
  λ n → refl Nat 0

let mul-zero-r : (n : Nat) → Eq Nat (mul n 0) 0 =
  natElim (λ n → Eq Nat (mul n 0) 0)
    (λ n ih → ih)
    (refl Nat 0)

let mul-id-l : Equality.LeftIdentity Nat mul 0 =
  natElim
    (λ n → Eq Nat (mul 1 n) n)
    (λ n → Equality.cong Nat Nat suc (add n 0) n)
    (refl Nat 0)

let mul-id-r : Equality.RightIdentity Nat mul 0 =
  natElim
    (λ n → Eq Nat (mul n 1) n)
    (λ n → Equality.cong Nat Nat suc (add n 0) n)
    (refl Nat 0)
