module Basic where

let id : (A : Type) → A → A = λ A x → x

let const : (A B : Type) → A → B → A = λ A B x _ → x

let flip : (A B C : Type) → (A → B → C) → B → A → C = λ A B C f x y → f y x

let comp : (A B C : Type) → (B → C) → (A → B) → A → C = λ A B C f g x → f (g x)

let app : (A : Type) (B : (x : A) → Type) → ((x : A) → B x) → (x : A) → B x = λ A B f x → f x

let swap : (A B : Type) → A × B → B × A = λ A B p → p.2 , p.1

let assoc : (A : Type) (B : (x : A) → Type) (C : (x : A) × B x → Type) → (p : (x : A) × B x) × C p → (x : A) × (y : B x) × C (x , y) = λ p → p.1.1 , p.1.2 , p.2

let assocs : (A B C : Type) → (A × B) × C → A × (B × C) = λ A B C p → p.1.1 , p.1.2 , p.2

let False : Type = (A : Type) → A

let Not : Type → Type = λ A → A → False
